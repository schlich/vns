---
title: "VNS Analysis"
author: "Tyler Schlichenmeyer"
format: dashboard
server: shiny
---

```{python}
import os
from pathlib import Path
import matplotlib.pyplot as plt
from shiny import render, ui, reactive
```


## {.toolbar}

```{python}
from pathlib import Path

from vns import Session


ui.input_select("experiment", "Experiment Label", choices=["BFINAC_VNS"], selected="BFINAC_VNS")


mat_files = [path.stem for path in Path(f"../data/BFINAC_VNS").glob("*.mat")]

ui.input_select("session", "Session", choices=mat_files
, selected=mat_files[0])


@reactive.effect
def _():
    data_path = Path('../data')
    mat_files = [path.stem for path in Path(data_path / input.experiment()).glob("*.mat")]
    ui.update_select("session", choices=mat_files)
    trials = Session(data_filepath=Path(data_path / input.experiment() / input.session())).get_trials()
    trial_numbers = [str(trial_number) for trial_number in list(trials["trialnumber"].item())]
    ui.update_select("trial", choices=trial_numbers)
```

## Row

### {.sidebar}

```{python}
ui.input_select("trial", "Trial", choices=[1], selected=1)
```

### Column

```{python}
import matplotlib.animation as animation
import matplotlib.pyplot as plt
from matplotlib.collections import PatchCollection
from matplotlib.patches import Ellipse, Rectangle
from shiny import render
import pandas as pd

from vns import EyeJoy


@render.ui
def trial_animation():
    data_path = Path("../data") / input.experiment() / input.session()
    session = Session(data_filepath=data_path)
    eyejoy = session.get_trials()["EyeJoy"].item()
    trial_num = input.trial()

    def initialize_trial(id: int):
        return pd.DataFrame(eyejoy[int(id)]).T.rename(
            columns={0: "x", 1: "y", 4: "t"}
        )[["x", "y", "t"]]

    t_trial = initialize_trial(input.trial())
    df = t_trial.reset_index().rename(columns={"index": "i"})

    downsampled = df.groupby(df.index // 100).mean()

    fig, ax = plt.subplots()
    ax.set_box_aspect(1)
    ax.set_title(f"Session={data_path.stem}, Trial={trial_num}")

    ax.set_xlim([-6, 6])
    ax.set_ylim([-6, 6])
    t_display = ax.text(2, -5.5, "t=0.0s")

    fixation_point = Ellipse((0, 0), 0.5, 0.5, color="black", alpha=0.3)

    fp = ax.add_patch(fixation_point)

    scat = ax.scatter(
        downsampled.loc[0, "x"],
        downsampled.loc[0, "y"],
    )

    def update(frame: int) -> tuple[Any, Any, Any]:
        time_fp_on = 0.758133
        time_fp_off = 2.041467
        scat.set_offsets((downsampled.loc[frame, "x"], downsampled.loc[frame, "y"]))
        t_display.set_text(f"time={frame/10}s")
        r = 0 if frame / 10 < time_fp_on or frame / 10 > time_fp_off else 0.5
        fp.set_width(r)
        fp.set_height(r)

        return (scat, t_display, fp)
        
    ani = animation.FuncAnimation(
        fig,
        update,
        frames=len(downsampled) - 1,
        repeat=True,
    )
    return ui.HTML(ani.to_jshtml(fps=15))

```