---
title: "VNS Analysis"
author: "Tyler Schlichenmeyer"
format: dashboard
server: shiny
---

```{python}
import os
from pathlib import Path
import matplotlib.pyplot as plt
from shiny import render, ui, reactive
```


## {.toolbar}

```{python}
from datetime import datetime
from pathlib import Path

from vns import Session, get_sessions

matfiles = Path("../data/BFINAC_VNS").glob("*.mat")

sessions = get_sessions(matfiles)
first_session = next(iter(sessions))

ui.input_select("session", "Session", choices=sessions, selected=first_session,)

trials = Session(
    datetime=datetime.fromisoformat(first_session)
).get_trials()

ui.input_select("trial", "Trial", choices=list(trials["trialnumber"]), selected=1)

```

## Row

```{python}

from datetime import datetime

from vns import Trial

@reactive.effect
def _():
    session = input.session()
    trials = Session(
        datetime=datetime.fromisoformat(session)
    ).get_trials()
    ui.update_select("trial", choices=list(trials["trialnumber"]))

```

## Row

### Column

```{python}

@render.text
def fractal():
    return Trial(id = input.trial(), fractal=6118).fractal
```

### Column

```{python}
import matplotlib.animation as animation
import matplotlib.pyplot as plt
from matplotlib.collections import PatchCollection
from matplotlib.patches import Ellipse, Rectangle
from shiny import render
import pandas as pd
import polars as pl
from datetime import datetime

from vns import Session

@render.ui
def trial_animation():
    session = Session(
        datetime = input.session()
    )
    trial_data = session.get_trials()
    trial_id = input.trial()
    trial = Trial(id=trial_id, fractal=trial_data[int(trial_id), "fractals"])

    fig, ax = plt.subplots()
    ax.set_box_aspect(1)
    ax.set_title(f"Session={session.datetime.isoformat()}, Trial={trial_id}")

    ax.set_xlim([-6, 6])
    ax.set_ylim([-6, 6])
    t_display = ax.text(2, -5.5, "t=0.0s")

    fixation_point = Ellipse((0, 0), 0.5, 0.5, color="black", alpha=0.3)

    fp = ax.add_patch(fixation_point)

    df = trial.eyejoy()

    scat = ax.scatter(
        df[0, "x"],
        df[0, "y"],
    )

    def update(frame: int) -> tuple[Any, Any, Any]:
        time_fp_on = 0.758133
        time_fp_off = 2.041467
        scat.set_offsets((df[frame, "x"], df[frame, "y"]))
        t_display.set_text(f"time={frame/1000}s")
        r = 0 if frame / 10 < time_fp_on or frame / 10 > time_fp_off else 0.5
        fp.set_width(r)
        fp.set_height(r)

        return (scat, t_display, fp)

    ani = animation.FuncAnimation(
        fig,
        update,
        frames=len(df) - 1,
        repeat=True,
    )
    return ui.HTML(ani.to_jshtml(fps=1000))

```